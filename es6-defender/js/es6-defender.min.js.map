{"version":3,"sources":["es6-defender.js"],"names":["PlayerState","Object","freeze","faceLeft","faceRight","exploding","InvaderState","seeking","locked","abducting","mutant","explodingReleaseHuman","Event","abducted","mutated","dead","removeProjectile","removeHuman","playerDead","collectedHuman","removeDebris","easing","playerAccelX","playerDampingX","playerMaxSpeedX","playerMaxSpeedY","debrisDamping","modulusx","halfmodulusx","starmodulusx","halfstarmodulusx","projectileLifetime","debrisLifetime","pointsLifetime","groundOffset","colourFlash","Global","viewWidth","viewHeight","StateVector","id","x","y","xdot","ydot","Player","state","t_startState","Invader","Human","Projectile","t_spawned","Debris","Points","points","Star","depth","sideLen","graphic","colour","graphicAbducting","colourMutant","graphic2","colour2","wrapx","wrapstarx","toLocal","lx","sv","offsetx","ly","gx_debug","clip","lcoords","remove","objects","graphics","o","findIndex","splice","delete","fillWith","n","f","Array","fill","map","cartesianProduct2","arr1","arr2","e1","e2","reduce","arr","e","concat","toTuples","fst","a","snd","xoverlap","x1","size1","x2","size2","yoverlap","y1","y2","collided","detectCollisions","svArr1","svArr2","filter","svPair","id1","collidedPair","id2","updatePlayerState","player","input","leftright","updateInvaderState","invaders","events","t","event","idx","i","invaderId","updatePlayerPosition","dt","updown","updateInvaderPosition","targetx","targety","Math","random","updateHumanPosition","updateProjectilePosition","updateDebrisPosition","d","updateInvaderPositions","invaderTargets","has","get","humanXDot","updateHumanPositions","humans","h","updateProjectilePositions","projectiles","p","updateDebrisPositions","debris","checkSeekingInvader","invader","inRangeHumans","length","humanId","checkLockedInvader","checkAbductingInvader","checkHitInvaders","checkHitPlayerProjectiles","checkHitPlayerInvaders","checkHitPlayerHumans","checkProjectiles","checkDebris","checkPoints","removePoints","invaderFire","invaderProjectileId","dx","abs","dy","l","sqrt","unitdx","unitdy","makeExplosion","debrisId","velocities","push","v","targetoffsetx","playerId","projectileId","invaderProjectiles","starfield","pointsId","score","resetGame","sound","floor","Map","doGame","textmap","debug","fire","seekingInvaders","lockedInvaders","abductingInvaders","mutantInvaders","projectileEvents","debrisEvents","pointsEvents","hitEvents","playerProjectileHitEvent","playerInvaderHitEvent","playerHumanHitEvent","seekingInvaderEvents","lockedInvaderEvents","abductingInvaderEvents","invaderEvents","allEvents","set","g","c","s","displacementList","displacement","displayList","setString","setNumber"],"mappings":"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","file":"es6-defender.min.js","sourcesContent":["// -------------------------------------------------------------------------------------------------------------------------------------------\n// constants and enums\n// -------------------------------------------------------------------------------------------------------------------------------------------\nlet PlayerState = Object.freeze({faceLeft:1, faceRight:2, exploding:3})\n\nlet InvaderState = Object.freeze({seeking:1, locked:2, abducting:3, mutant:4, exploding:5, explodingReleaseHuman:6})\n\nlet Event = Object.freeze({locked:1, abducted:2, mutated:3, dead:4, removeProjectile:5, removeHuman:6, playerDead:7, collectedHuman:8, removeDebris:9})\n\nconst easing = 0.05;\nconst playerAccelX = 520;\nconst playerDampingX = 6;\nconst playerMaxSpeedX = 164;\nconst playerMaxSpeedY = 42;\nconst debrisDamping = 0.6;\nconst modulusx = 512;\nconst halfmodulusx = modulusx / 2;\nconst starmodulusx = 384;\nconst halfstarmodulusx = starmodulusx / 2;\nconst projectileLifetime = 60;\nconst debrisLifetime = 100;\nconst pointsLifetime = 200;\nconst groundOffset = 6;\nconst colourFlash = -1;\n\nlet Global = {viewWidth:0, viewHeight:0};\n\n// -------------------------------------------------------------------------------------------------------------------------------------------\n// custom data types\n// -------------------------------------------------------------------------------------------------------------------------------------------\nclass StateVector {\n  \n  constructor(id, x, y, xdot = 0, ydot = 0) {\n    this.id = id;\n    this.x = x;\n    this.y = y;\n    this.xdot = xdot;\n    this.ydot = ydot;\n  }\n}\n\nclass Player extends StateVector {\n\n  constructor(id, x, y, state, t_startState) {\n    super(id, x, y);\n\n    this.state = state;\n    this.t_startState = t_startState;\n  }\n}\n\nclass Invader extends StateVector {\n  \n  constructor(id, x, y, state, t_startState) {\n    super(id, x, y);\n\n    this.state = state;\n    this.t_startState = t_startState;\n  }\n}\n\nclass Human extends StateVector {\n\n  constructor(id, x, y, xdot, ydot) {\n    super(id, x, y, xdot, ydot);\n  }\n}\n\nclass Projectile extends StateVector {\n\n  constructor(id, x, y, xdot, ydot, t_spawned) {\n    super(id, x, y, xdot, ydot);\n\n    this.t_spawned = t_spawned;\n  }\n}\n\nclass Debris extends StateVector {\n\n  constructor(id, x, y, xdot, ydot, t_spawned) {\n    super(id, x, y, xdot, ydot);\n\n    this.t_spawned = t_spawned;\n  }\n}\n\nclass Points extends StateVector {\n\n  constructor(id, x, y, xdot, ydot, t_spawned, points) {\n    super(id, x, y, xdot, ydot);\n\n    this.t_spawned = t_spawned;\n    this.points = points;\n  }\n}\n\nclass Star extends StateVector {\n\n  constructor(id, x, y, depth) {\n    super(id, x, y);\n\n    this.depth = depth;\n  }\n}\n\n// -------------------------------------------------------------------------------------------------------------------------------------------\n// custom data type statics\n// -------------------------------------------------------------------------------------------------------------------------------------------\nPlayer.sideLen = 4;\nPlayer.graphic = ['\\xab\\xac\\xad\\xae\\n\\xbb\\xbc\\xbd\\xbe\\n\\xcb\\xcc\\xcd\\xce\\n\\xdb\\xdc\\xdd\\xde',\n                  '\\xa6\\xa7\\xa8\\xa9\\n\\xb6\\xb7\\xb8\\xb9\\n\\xc6\\xc7\\xc8\\xc9\\n\\xd6\\xd7\\xd8\\xd9'];\nPlayer.colour = 0x00ccff;\n\nInvader.sideLen = 4;\nInvader.graphic = '\\xa1\\xa2\\xa3\\xa4\\n\\xb1\\xb2\\xb3\\xb4\\n\\xc1\\xc2\\xc3\\xc4\\n\\xd1\\xd2\\xd3\\xd4';\nInvader.graphicAbducting = '\\xa1\\xa2\\xa3\\xa4\\n\\xb1\\xb2\\xb3\\xb4\\n\\xc1\\xc2\\xc3\\xc4\\n\\xd1\\xd2\\xd3\\xd4\\n \\xe1\\xe2 \\n \\xf1\\xf2';\nInvader.colour = 0x00ff00;\nInvader.colourMutant = colourFlash;\n\nHuman.sideLen = 2;\nHuman.graphic = '\\xe1\\xe2\\n\\xf1\\xf2';\nHuman.colour = 0x00aa99;\n\nProjectile.sideLen = 2;\nProjectile.graphic = '--';\nProjectile.graphic2 = '\\xe6\\xe7\\n\\xf6\\xf7';\nProjectile.colour = 0xffff00;\nProjectile.colour2 = 0xffcc00;\n\nDebris.graphic = '@';\nDebris.colour = 0xff88ff;\n\nPoints.colour = colourFlash;\n\nStar.graphic = '.';\nStar.colour = colourFlash;\n\n\n// -------------------------------------------------------------------------------------------------------------------------------------------\n// generic functions\n// -------------------------------------------------------------------------------------------------------------------------------------------\nlet wrapx = (x) => {\n  if(x < -halfmodulusx) x += modulusx;\n  else if(x >= halfmodulusx) x -= modulusx;\n  return x;\n}\n\nlet wrapstarx = (x) => {\n  if(x < -halfstarmodulusx) x += starmodulusx;\n  else if(x >= halfstarmodulusx) x -= starmodulusx;\n  return x;\n}\n\nlet toLocal = sv => {\n  let lx = sv.x - offsetx;\n  lx += Global.viewWidth / 2;\n\n  let ly = sv.y;\n\n  return {id:sv.id, lx:lx, ly:ly, gx_debug:sv.x};\n}\n\nlet clip = lcoords => (lcoords.lx >= 0) && (lcoords.lx < Global.viewWidth);\n\nlet remove = (objects, id, graphics) => {\n  let o = objects.findIndex(o => o.id == id);\n  objects.splice(o, 1);\n  graphics.delete(id);\n}\n\nlet fillWith = (n, f) => Array(n).fill().map(f);\n\n// -------------------------------------------------------------------------------------------------------------------------------------------\n// collision functions\n// -------------------------------------------------------------------------------------------------------------------------------------------\nlet cartesianProduct2 = (arr1, arr2) =>\n  arr1.map(e1 => arr2.map(e2 => [e1, e2])).reduce((arr, e) => arr.concat(e), []);\n\nlet toTuples = (arr) =>\n  arr.map(a => ({fst:a[0], snd:a[1]}));\n\n\nlet xoverlap = (x1, size1, x2, size2) =>\n  (x2 < (x1 + size1) &&\n   x1 < (x2 + size2));\n\nlet yoverlap = (y1, size1, y2, size2) =>\n  (y2 < (y1 + size1) &&\n   y1 < (y2 + size2));\n\nlet collided = ({x:x1, y:y1}, size1, {x:x2, y:y2}, size2) =>\n  (xoverlap(x1, size1, x2, size2) && yoverlap(y1, size1, y2, size2));\n\n\nlet detectCollisions = (svArr1, size1, svArr2, size2) =>\n  toTuples(cartesianProduct2(svArr1, svArr2))\n    .filter(svPair => collided(svPair.fst, size1, svPair.snd, size2))\n    .map(collidedPair => ({id1:collidedPair.fst.id, id2:collidedPair.snd.id}));\n\n\n// -------------------------------------------------------------------------------------------------------------------------------------------\n// update state\n// -------------------------------------------------------------------------------------------------------------------------------------------\nlet updatePlayerState = (player, input, playerDead) => {\n  if(playerDead) {\n    player.state = PlayerState.exploding;\n    return;\n  }\n\n  if(input.leftright != 0) {\n    player.state = (input.leftright == -1) ? PlayerState.faceLeft : PlayerState.faceRight;\n  }\n}\n\nlet updateInvaderState = (invaders, events, t) => {\n  events.map(e => {\n    if(e.event == Event.locked || e.event == Event.abducted || e.event == Event.dead || e.event == Event.mutated)\n    {\n      let idx = invaders.findIndex(i => i.id == e.invaderId);\n      let i = invaders[idx];\n      i.state = {\n        [Event.locked]: InvaderState.locked,\n        [Event.abducted]: InvaderState.abducting,\n        [Event.mutated]: InvaderState.mutant,\n        [Event.dead]: i.state == InvaderState.abducting ? InvaderState.explodingReleaseHuman : InvaderState.exploding\n      }[e.event];\n      i.t_startState = t;      \n    }\n  })\n}\n\n// -------------------------------------------------------------------------------------------------------------------------------------------\n// update position\n// -------------------------------------------------------------------------------------------------------------------------------------------\nlet updatePlayerPosition = (sv, input, dt) => {\n  sv.xdot += playerAccelX * input.leftright * dt;\n  sv.ydot = playerMaxSpeedY * input.updown;\n\n  if(sv.xdot < -playerMaxSpeedX) sv.xdot = -playerMaxSpeedX;\n  if(sv.xdot > playerMaxSpeedX) sv.xdot = playerMaxSpeedX;\n\n  if(!input.leftright) sv.xdot += -playerDampingX * sv.xdot * dt;\n\n  sv.x = 0;\n  sv.y += sv.ydot * dt;\n\n  if(sv.y < 0) sv.y = 0;\n  if(sv.y > Global.viewHeight - groundOffset - 4) sv.y = Global.viewHeight - groundOffset - 4;\n\n  return sv;\n}\n\nlet updateInvaderPosition = (sv, state, targetx, targety, dt) => {\n  let a = {\n      [InvaderState.seeking]: () => {\n        sv.xdot += 72 * (Math.random() - 0.5) * dt;\n        sv.ydot += 72 * (Math.random() - 0.5) * dt;\n        sv.x += sv.xdot * dt;\n        sv.y += sv.ydot * dt;\n\n        if(sv.y < 5) { sv.ydot = -sv.ydot; sv.y = 5; }\n        if(sv.y > (Global.viewHeight - 5)) { sv.ydot = -sv.ydot; sv.y = (Global.viewHeight - 5); }\n      },\n      [InvaderState.locked]: () => {\n        sv.xdot = targetx;\n        sv.ydot = 12;\n\n        sv.x += sv.xdot * dt;\n        sv.y += sv.ydot * dt;\n      },\n      [InvaderState.abducting]: () => {\n        sv.ydot = -12;\n\n        sv.y += sv.ydot * dt;\n      },\n      [InvaderState.mutant]: () => {\n        sv.xdot += dt * (targetx - sv.x) > 0 ? 1.2 : -1.2;\n        sv.ydot += dt * (targety - sv.y) > 0 ? 1.2 : -1.2;\n\n        sv.xdot += -1.2 * sv.xdot * dt;\n        sv.ydot += -1.2 * sv.ydot * dt;\n\n        sv.x += sv.xdot * dt;\n        sv.y += sv.ydot * dt;\n      },\n      [InvaderState.exploding]: () => {\n      },\n      [InvaderState.explodingReleaseHuman]: () => {\n      }\n    }[state]();\n\n  return sv;\n}\n\nlet updateHumanPosition = (sv, dt) => {\n  sv.x += sv.xdot * dt;\n  sv.y += sv.ydot * dt;\n\n  return sv;\n}\n\nlet updateProjectilePosition = (sv, dt) => {\n  sv.x += sv.xdot * dt;\n  sv.y += sv.ydot * dt;\n\n  return sv;\n}\n\nlet updateDebrisPosition = (d, dt) => {\n  updateProjectilePosition(d, dt);\n\n  d.xdot += -debrisDamping * d.xdot * dt;\n  d.ydot += -debrisDamping * d.ydot * dt;\n\n  return d;\n}\n\n// -------------------------------------------------------------------------------------------------------------------------------------------\n// update position helpers\n// -------------------------------------------------------------------------------------------------------------------------------------------\nlet updateInvaderPositions = (invaders, invaderTargets, player, dt) =>\n  invaders.map(i => {\n    let targetx = 0, targety = 0;\n    if(i.state == InvaderState.mutant) {\n      targetx = player.x;\n      targety = player.y;\n    }\n    else if(invaderTargets.has(i.id)) {\n      targetx = invaderTargets.get(i.id).humanXDot;\n    }\n    updateInvaderPosition(i, i.state, targetx, targety, dt);\n  });\n\nlet updateHumanPositions = (humans, dt) => humans.map(h => updateHumanPosition(h, dt));\n\nlet updateProjectilePositions = (projectiles, dt) => projectiles.map(p => updateProjectilePosition(p, dt));\n\nlet updateDebrisPositions = (debris, dt) => debris.map(d => updateDebrisPosition(d, dt));\n\n\n// -------------------------------------------------------------------------------------------------------------------------------------------\n// check state and generate events\n// -------------------------------------------------------------------------------------------------------------------------------------------\nlet checkSeekingInvader = (invader, humans) => {\n  let inRangeHumans = humans.filter(h => xoverlap(invader.x, Invader.sideLen, h.x, Human.sideLen));\n  if(inRangeHumans.length > 0) {\n    if(Math.random() < 0.05) {\n      return [{event:Event.locked, invaderId:invader.id, humanId:inRangeHumans[0].id, humanXDot:inRangeHumans[0].xdot}];\n    }\n  }\n  return [];\n}\n\nlet checkLockedInvader = (invader, e) => {\n  return ((invader.y + Invader.sideLen) >= Global.viewHeight - groundOffset) ?\n    [{event:Event.abducted, invaderId:invader.id, humanId:e.humanId},\n     {event:Event.removeHuman, id:e.humanId}] :\n    [];\n}\n\nlet checkAbductingInvader = (invader) => {\n  return (invader.y <= 0) ?\n    [{event:Event.mutated, invaderId:invader.id}] :\n    [];\n}\n\nlet checkHitInvaders = (invaders, projectiles) =>\n  detectCollisions(invaders, Invader.sideLen, projectiles, Projectile.sideLen)\n    .reduce((arr, collidedPair) => arr.concat([\n      {event:Event.dead, invaderId:collidedPair.id1},\n      {event:Event.removeProjectile, id:collidedPair.id2}\n    ]), []);\n\nlet checkHitPlayerProjectiles = (player, projectiles) =>\n  detectCollisions([player], Player.sideLen, projectiles, Projectile.sideLen)\n    .map(collidedPair => ({event:Event.playerDead}));\n\nlet checkHitPlayerInvaders = (player, invaders) =>\n  detectCollisions([player], Player.sideLen, invaders, Invader.sideLen)\n    .map(collidedPair => ({event:Event.playerDead}));\n\nlet checkHitPlayerHumans = (player, humans) =>\n  detectCollisions([player], Player.sideLen, humans, Human.sideLen)\n    .reduce((arr, collidedPair) => arr.concat([\n      {event:Event.collectedHuman},\n      {event:Event.removeHuman, id:collidedPair.id2}\n    ]), []);\n\nlet checkProjectiles = (projectiles, t) =>\n  projectiles.filter(p => (t - p.t_spawned) > projectileLifetime)\n    .map(p => ({event:Event.removeProjectile, id:p.id}));\n\nlet checkDebris = (debris, t) =>\n  debris.filter(d => (t - d.t_spawned) > debrisLifetime)\n    .map(d => ({event:Event.removeDebris, id:d.id}));\n\nlet checkPoints = (points, t) =>\n  points.filter(p => (t - p.t_spawned) > pointsLifetime)\n    .map(p => ({event:Event.removePoints, id:p.id}));\n\nlet invaderFire = (i, player, invaderProjectileId, t) => {\n    let dx = player.x - i.x;\n    if(Math.random() < 0.01 && Math.abs(dx) < (Global.viewWidth / 3)) {\n      let dy = player.y - i.y;\n      let l = Math.sqrt(dx * dx + dy * dy);\n      let unitdx = dx / l;\n      let unitdy = dy / l;\n      return new Projectile(invaderProjectileId, i.x, i.y, unitdx * 60, unitdy * 60, t);\n    }\n    return null;\n}\n\nlet makeExplosion = (debris, debrisId, i, t) => {\n  let velocities = [[42,42],[60,0],[42,-42],[0,-60],[-42,-42],[-60,0],[-42,42],[0,60]];\n  velocities.map(v => {\n    debris.push(new Debris(debrisId++, i.x, i.y,  v[0],  v[1], t));\n  });\n  return debrisId;\n}\n\n\n// -------------------------------------------------------------------------------------------------------------------------------------------\n// game state variables\n// -------------------------------------------------------------------------------------------------------------------------------------------\nlet offsetx = 0;\nlet targetoffsetx = 0;\nlet playerId = null;\nlet invaderId = null;\nlet player = null;\nlet invaders = null;\nlet humanId = null;\nlet humans = null;\nlet projectileId = null;\nlet projectiles = null;\nlet invaderProjectileId = null;\nlet invaderProjectiles = null;\nlet starfield = null;\nlet debrisId = null;\nlet debris = null;\nlet pointsId = null;\nlet points = null;\nlet graphics = null;\nlet invaderTargets = null;\nlet score = null;\n\n\n// -------------------------------------------------------------------------------------------------------------------------------------------\n// reset game state\n// -------------------------------------------------------------------------------------------------------------------------------------------\nlet resetGame = (viewWidth, viewHeight, sound) => {\n\n  Global.viewWidth = viewWidth;\n  Global.viewHeight = viewHeight;\n\n  playerId = 1;\n  invaderId = 100;\n  player = new Player(playerId, 0, viewHeight / 2, PlayerState.faceRight, 0);\n  invaders = fillWith(10, _ => new Invader(invaderId++, (((Math.random() * 0.8) + 0.2) * halfmodulusx) * [1,-1][Math.floor(Math.random()*2)], viewHeight / 2, InvaderState.seeking, 0));\n  humanId = 200;\n  humans = fillWith(10, _ => new Human(humanId++, (Math.random() - 0.5) * modulusx, viewHeight - groundOffset, 12 * (Math.random() - 0.5)));\n  projectileId = 500;\n  projectiles = [];\n  invaderProjectileId = 1000;\n  invaderProjectiles = [];\n  starfield = fillWith(50, _ => new Star(2000, (Math.random() - 0.5) * starmodulusx, Math.random() * viewHeight, (Math.random() * 0.5) + 0.5));\n  debrisId = 3000;\n  debris = [];\n  pointsId = 5000;\n  points = [];\n  graphics = new Map();\n  invaderTargets = new Map();\n  score = 0;\n\n  sound('1up');\n}\n\n\n// -------------------------------------------------------------------------------------------------------------------------------------------\n// run a single game tick\n// -------------------------------------------------------------------------------------------------------------------------------------------\nlet doGame = (textmap, input, sound, t, dt, debug = false) => {\n\n  // player fire button\n  if(input.fire) {\n    sound('zap');\n    projectiles.push(new Projectile(projectileId++, player.x, player.y+2, (player.state == PlayerState.faceLeft) ? -240 : 240, 0, t));\n    if(projectileId >= 1000) projectileId = 500;\n  }\n\n  // filter invaders according to state\n  let seekingInvaders   = invaders.filter(i => i.state == InvaderState.seeking);\n  let lockedInvaders    = invaders.filter(i => i.state == InvaderState.locked);\n  let abductingInvaders = invaders.filter(i => i.state == InvaderState.abducting);\n  let mutantInvaders    = invaders.filter(i => i.state == InvaderState.mutant);\n\n  // invader fire\n  seekingInvaders.map(i => {\n    let p = invaderFire(i, player, invaderProjectileId, t);\n    if(p) {\n      invaderProjectiles.push(p);\n      invaderProjectileId++;\n    }\n  });\n\n  mutantInvaders.map(i => {\n    let p = invaderFire(i, player, invaderProjectileId, t);\n    if(p) {\n      invaderProjectiles.push(p);\n      invaderProjectileId++;\n    }\n    if(Math.random() < 0.02) {\n      invaderProjectiles.push(new Projectile(invaderProjectileId++, i.x, i.y, (Math.random() - 0.5) * 60, (Math.random() - 0.5) * 60, t));\n    }\n  });\n\n  if(invaderProjectileId >= 1500) invaderProjectileId = 1000;\n  if(invaderProjectiles.length > 30) remove(invaderProjectiles, invaderProjectiles[0].id, graphics);\n\n  // events\n  let projectileEvents          = checkProjectiles(projectiles, t);\n  let debrisEvents              = checkDebris(debris, t);\n  let pointsEvents              = checkPoints(points, t);\n\n  let hitEvents                 = checkHitInvaders(invaders, projectiles);\n\n  let playerProjectileHitEvent  = checkHitPlayerProjectiles(player, invaderProjectiles);\n  let playerInvaderHitEvent     = checkHitPlayerProjectiles(player, invaders);\n  let playerHumanHitEvent       = checkHitPlayerHumans(player, humans);\n\n  let seekingInvaderEvents      = seekingInvaders.reduce((arr, i)   => arr.concat(checkSeekingInvader(i, humans)), []);\n  let lockedInvaderEvents       = lockedInvaders.reduce((arr, i)    => arr.concat(checkLockedInvader(i, invaderTargets.get(i.id))), []);\n  let abductingInvaderEvents    = abductingInvaders.reduce((arr, i) => arr.concat(checkAbductingInvader(i)), []);\n\n  let invaderEvents = [].concat(hitEvents, seekingInvaderEvents, lockedInvaderEvents, abductingInvaderEvents);\n\n  let allEvents = [].concat(projectileEvents, playerProjectileHitEvent, playerInvaderHitEvent, playerHumanHitEvent, invaderEvents, debrisEvents, pointsEvents);\n  let playerDead = false;\n\n  allEvents.filter(e => e.event == Event.removeProjectile)  .map(e => remove(projectiles, e.id, graphics));\n  allEvents.filter(e => e.event == Event.removeDebris)      .map(e => remove(debris, e.id, graphics));\n  allEvents.filter(e => e.event == Event.removePoints)      .map(e => remove(points, e.id, graphics));\n  allEvents.filter(e => e.event == Event.locked)            .map(e => invaderTargets.set(e.invaderId, e));\n  allEvents.filter(e => e.event == Event.removeHuman)       .map(e => remove(humans, e.id, graphics));\n  allEvents.filter(e => e.event == Event.playerDead)        .map(e => {sound('death'); playerDead = true;});\n  allEvents.filter(e => e.event == Event.collectedHuman)    .map(_ => {sound('coin'); score += 20000; points.push(new Points(pointsId++, player.x, player.y, 0.01, 0.01, t, '20000'));});\n\n\n  // update game object state\n  // game objects are updated 'in-place'\n  updatePlayerState         (player, input, playerDead);\n  updateInvaderState        (invaders, invaderEvents, t);\n\n  // update positions\n  // game objects are updated 'in-place'\n  updatePlayerPosition      (player, input, dt);\n  updateInvaderPositions    (invaders, invaderTargets, player, dt);\n  updateHumanPositions      (humans, dt);\n  updateProjectilePositions (projectiles, dt);\n  updateProjectilePositions (invaderProjectiles, dt);\n  updateDebrisPositions     (debris, dt);\n  updateProjectilePositions (points, dt);\n\n  // triggers based on state changes must be placed after state update code\n\n  // abducting invaders drop human when hit\n  invaders.filter(i => i.state == InvaderState.explodingReleaseHuman && i.t_startState == t)\n    .map(i => humans.push(new Human(humanId++, i.x+2, i.y, 0, 6)));\n\n  // invader explosion\n  invaders.filter(i => i.state == InvaderState.explodingReleaseHuman || i.state == InvaderState.exploding && i.t_startState == t)\n    .map(i => {\n      sound('boom');\n      score += 1000;\n      remove(invaders, i.id, graphics);\n      // debris updated 'in-place'\n      debrisId = makeExplosion(debris, debrisId, i, t);\n      if(debrisId >= 4000) debrisId = 3000;\n    });\n\n\n  // prepare to draw\n  // update graphics map\n  graphics.set(player.id, (player.state == PlayerState.faceLeft) ? {g:Player.graphic[0], c:Player.colour} : {g:Player.graphic[1], c:Player.colour});\n\n  invaders.map(i => {\n    let g = (i.state == InvaderState.abducting) ? Invader.graphicAbducting : Invader.graphic;\n    let c = (i.state == InvaderState.mutant) ? Invader.colourMutant : Invader.colour;\n    graphics.set(i.id, {g:g, c:c});\n  });\n  humans              .map(h => graphics.set(h.id, {g:Human.graphic,       c:Human.colour}));\n  projectiles         .map(p => graphics.set(p.id, {g:Projectile.graphic,  c:Projectile.colour}));\n  invaderProjectiles  .map(p => graphics.set(p.id, {g:Projectile.graphic2, c:Projectile.colour2}));\n  starfield           .map(s => graphics.set(s.id, {g:Star.graphic,        c:Star.colour}));\n  debris              .map(d => graphics.set(d.id, {g:Debris.graphic,      c:Debris.colour}));\n  points              .map(p => graphics.set(p.id, {g:p.points,            c:0xffffff}));\n\n  // compute displacements\n  let displacementList = [].concat(invaders, humans, projectiles, invaderProjectiles, debris, points);\n\n  let displacement = player.xdot * dt;\n  displacementList.map(o => {o.x = wrapx(o.x - displacement)});\n\n  starfield.map(o => {o.x = wrapstarx(o.x - (displacement * o.depth))});\n\n  let displayList = [].concat(starfield, displacementList, player);\n\n  // draw\n  displayList\n    .map(toLocal)\n    .filter(clip)\n    .map(i => {\n      let g = graphics.has(i.id) ? graphics.get(i.id) : {g:'!', c:0xff0000};\n      textmap.setString(Math.floor(i.lx), Math.floor(i.ly), g.g, g.c)\n      if(debug) {\n        // overlay object id and x coordinate\n        textmap.setNumber(Math.floor(i.lx+3), Math.floor(i.ly), i.id)\n        textmap.setNumber(Math.floor(i.lx), Math.floor(i.ly+4), Math.floor(i.gx_debug))\n      }\n    });\n\n  textmap.setString(50, 2, 'Score: ');\n  textmap.setNumber(57, 2, score);\n\n  // compute offset of local coordinate system\n  // shift player to right or left of screen\n  (player.state == PlayerState.faceLeft) ? targetoffsetx = -Global.viewWidth * 0.3 : targetoffsetx = Global.viewWidth * 0.3;\n  // apply 'forward motion' effect as player velocity increases\n  targetoffsetx -= 0.05 * player.xdot;\n  // ease offset towards target offset\n  offsetx += easing * (targetoffsetx - offsetx);\n\n  return player.state == PlayerState.exploding;\n}\n\n"]}